// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enum
enum Role {
  USER
  GUEST
}

// model
model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  fullName    String        @map("full_name")
  avatarUrl   String?       @map("avatar_url")
  password    String
  role        Role          @default(USER)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @default(now()) @map("updated_at")
  songs       Song[]
  likedSongs  LikedSong[]
  playlists   Playlist[]
  LikedAuthor LikedAuthor[]

  @@map("user")
}

model Song {
  id             Int            @id @default(autoincrement())
  title          String
  songPath       String         @map("song_path")
  imagePath      String?        @map("image_path")
  listenCount    Int            @default(0) @map("listen_count")
  user           User           @relation(fields: [userId], references: [id])
  userId         Int            @map("user_id")
  author         Author         @relation(fields: [authorId], references: [id])
  authorId       Int            @map("author_id")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @default(now()) @map("updated_at")
  likedUsers     LikedSong[]
  songCategories SongCategory[]
  songPlaylists  SongPlaylist[]

  @@map("song")
}

model LikedSong {
  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id])
  songId Int  @map("song_id")
  song   Song @relation(fields: [songId], references: [id])

  @@id([userId, songId])
  @@map("liked_song")
}

model Category {
  id             Int            @id @default(autoincrement())
  categoryName   String         @unique @map("category_name")
  image          String?
  banner         String?
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @default(now()) @map("updated_at")
  songCategories SongCategory[]

  @@map("category")
}

model SongCategory {
  songId     Int      @map("song_id")
  song       Song     @relation(fields: [songId], references: [id])
  categoryId Int      @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([songId, categoryId])
  @@map("song_category")
}

model Author {
  id         Int           @id @default(autoincrement())
  authorName String        @unique @map("author_name")
  image      String?
  banner     String?
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @default(now()) @map("updated_at")
  songs      Song[]
  likedUsers LikedAuthor[]

  @@map("author")
}

model LikedAuthor {
  userId   Int    @map("user_id")
  user     User   @relation(fields: [userId], references: [id])
  authorId Int    @map("author_id")
  author   Author @relation(fields: [authorId], references: [id])

  @@id([userId, authorId])
  @@map("liked_author")
}

model Playlist {
  id            Int            @id @default(autoincrement())
  playlistName  String         @unique @map("playlist_name")
  image         String?
  banner        String?
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @default(now()) @map("updated_at")
  userId        Int
  user          User           @relation(fields: [userId], references: [id])
  songPlaylists SongPlaylist[]

  @@map("playlist")
}

model SongPlaylist {
  songId     Int      @map("song_id")
  song       Song     @relation(fields: [songId], references: [id])
  playlistId Int      @map("playlist_id")
  playlist   Playlist @relation(fields: [playlistId], references: [id])

  @@id([songId, playlistId])
  @@map("song_playlist")
}
